/* Steven Andrews, started 10/22/2001.
 This is the header for the functions in the Smoldyn program.  See documentation
 called Smoldyn_doc1.pdf and Smoldyn_doc2.pdf.
 Copyright 2003-2011 by Steven Andrews.  This work is distributed under the terms
 of the Gnu General Public License (GPL). */

#ifndef __smoldynfuncs_h__
#define __smoldynfuncs_h__

#include "smoldyn.h"
#include "parse.h"
#include "SimCommand.h"
#include "smoldynconfigure.h"			// generated by CMake from smoldynconfigure.h.in

/*********************** Global variable declarations **********************/

extern void (*LoggingCallback)(simptr,int,const char*,...);
extern int ThrowThreshold;
extern FILE* LogFile;

extern char ErrorString[];
extern int ErrorType;
extern char SimFlags[];

#define CHECK(A)				if(!(A)) {ErrorType=1;goto failure;} else (void)0
#define CHECKMEM(A)			if(!(A)) {ErrorType=3;sprintf(ErrorString,"Cannot allocate memory"); goto failure;} else (void)0
#define CHECKS(A,...)		if(!(A)) {ErrorType=2;sprintf(ErrorString,__VA_ARGS__); goto failure;} else (void)0
#define CHECKBUG(A,...)	if(!(A)) {ErrorType=4;sprintf(ErrorString,__VA_ARGS__); goto failure;} else (void)0

extern int VCellDefined;


/********************************* Molecules *******************************/

// enumerated type functions
enum MolecState molstring2ms(char *string);
char *molms2string(enum MolecState ms,char *string);

// low level utilities
int molismobile(simptr sim,int species,enum MolecState ms);
int molwildcardname(molssptr mols,char *name,int channel,int itest);
int readmolname(simptr sim,char *str,enum MolecState *msptr,int channel);
void molchangeident(simptr sim,moleculeptr mptr,int ll,int m,int i,enum MolecState ms,panelptr pnl);
int molssetgausstable(simptr sim,int size);
void molsetdifc(simptr sim,int ident,enum MolecState ms,double difc);
int molsetdifm(simptr sim,int ident,enum MolecState ms,double *difm);
int molsetdrift(simptr sim,int ident,enum MolecState ms,double *drift);
int molsetsurfdrift(simptr sim,int ident,enum MolecState ms,int surface,enum PanelShape ps,double *drift);
void molsetdisplaysize(simptr sim,int ident,enum MolecState ms,double dsize);
void molsetcolor(simptr sim,int ident,enum MolecState ms,double *color);
void molsetlistlookup(simptr sim,int ident,enum MolecState ms,int ll);
void molsetexist(simptr sim,int ident,enum MolecState ms,int exist);
int molcount(simptr sim,int i,enum MolecState ms,boxptr bptr,int max);
double MolCalcDifcSum(simptr sim,int i1,enum MolecState ms1,int i2,enum MolecState ms2);

// memory management
void molssfree(molssptr mols,int maxsrf);
int molexpandsurfdrift(simptr sim,int oldmaxspec,int oldmaxsrf);

// data structure output
void molssoutput(simptr sim);
void writemols(simptr sim,FILE *fptr);
void writemolecules(simptr sim,FILE *fptr);
int checkmolparams(simptr sim,int *warnptr);

// structure setup
int molenablemols(simptr sim,int maxspecies);
void molsetcondition(molssptr mols,enum StructCond cond,int upgrade);
int addmollist(simptr sim,const char *nm,enum MolListType mlt);
int molsetmaxmol(simptr sim,int max);
int moladdspecies(simptr sim,const char *nm);
int molsetexpansionflag(simptr sim,int i,int flag);
int molsupdate(simptr sim);

// adding and removing molecules
void molkill(simptr sim,moleculeptr mptr,int ll,int m);
moleculeptr getnextmol(molssptr mols);
int addmol(simptr sim,int nmol,int ident,double *poslo,double *poshi,int sort);
int addsurfmol(simptr sim,int nmol,int ident,enum MolecState ms,double *pos,panelptr pnl,int surface,enum PanelShape ps,char *pname);
int addcompartmol(simptr sim,int nmol,int ident,compartptr cmpt);

// core simulation functions
void moldosurfdrift2D(simptr sim,moleculeptr mptr,double dt);
int molsort(simptr sim);
int diffuse(simptr sim);
int diffuse_threaded(simptr sim);  // ?? threaded diffuses all molecules

/*********************************** Walls **********************************/

// low level utilities
void systemrandpos(simptr sim,double *pos);
double systemvolume(simptr sim);
void systemcorners(simptr sim,double *poslo,double *poshi);
double systemdiagonal(simptr sim);
int posinsystem(simptr sim,double *pos);
double wallcalcdist2(simptr sim,double *pos1,double *pos2,int wpcode,double *vect);

// memory management
void wallsfree(wallptr *wlist,int dim);

// data structure output
void walloutput(simptr sim);
void writewalls(simptr sim,FILE *fptr);
int checkwallparams(simptr sim,int *warnptr);

// structure setup
int walladd(simptr sim,int d,int highside,double pos,char type);
int wallsettype(simptr sim,int d,int highside,char type);

// core simulation functions
int checkwalls_threaded(simptr sim,int ll,int reborn,boxptr bptr);	//?? threaded
int checkwalls(simptr sim,int ll,int reborn,boxptr bptr);

/********************************* Reactions ********************************/

// enumerated types
enum RevParam rxnstring2rp(char *string);

// low level utilities
int readrxnname(simptr sim,char *rname,int *orderptr,rxnptr *rxnpt);
int rxnisprod(simptr sim,int i,enum MolecState ms,int code);

// memory management
void rxnssfree(rxnssptr rxnss);
int rxnexpandmaxspecies(simptr sim,int maxspecies);

// data structure output
void rxnoutput(simptr sim,int order);
void writereactions(simptr sim,FILE *fptr);
int checkrxnparams(simptr sim,int *warnptr);

// parameter calculations
int rxnsetrate(simptr sim,int order,int r);

// structure set up
void rxnsetcondition(simptr sim,int order,enum StructCond cond,int upgrade);
int RxnSetValue(simptr sim,const char *option,rxnptr rxn,double value);
int RxnSetRevparam(simptr sim,rxnptr rxn,enum RevParam rparamt,double rparam,int prd,double *pos,int dim);
void RxnSetPermit(simptr sim,rxnptr rxn,int order,enum MolecState *rctstate,int value);
void RxnSetCmpt(rxnptr rxn,compartptr cmpt);
void RxnSetSurface(rxnptr rxn,surfaceptr srf);
rxnptr RxnAddReaction(simptr sim,const char *rname,int order,int *rctident,enum MolecState *rctstate,int nprod,int *prdident,enum MolecState *prdstate,compartptr cmpt,surfaceptr srf);
rxnptr RxnAddReactionCheck(simptr sim,char *rname,int order,int *rctident,enum MolecState *rctstate,int nprod,int *prdident,enum MolecState *prdstate,compartptr cmpt,surfaceptr srf);
int loadrxn(simptr sim,ParseFilePtr *pfpptr,char *line2);
int rxnsupdate(simptr sim);

// core simulation functions
int doreact(simptr sim,rxnptr rxn,moleculeptr mptr1,moleculeptr mptr2,int ll1,int m1,int ll2,int m2,double *pos,panelptr pnl);
int zeroreact(simptr sim);
int unireact(simptr sim);
int unireact_threaded(simptr sim);	//?? threaded
int bireact(simptr sim,int neigh);
int bireact_threaded(simptr sim,int neigh);	//?? threaded

/********************************* Surfaces *********************************/

// enumerated types
enum PanelFace surfstring2face(char *string);
char *surfface2string(enum PanelFace face,char *string);
enum PanelShape surfstring2ps(char *string);
char *surfps2string(enum PanelShape ps,char *string);
enum DrawMode surfstring2dm(char *string);
char *surfdm2string(enum DrawMode dm,char *string);

// low level utilities
int readsurfacename(simptr sim,const char *str,enum PanelShape *psptr,int *pptr);
double panelarea(panelptr pnl,int dim);
double surfacearea(surfaceptr srf,int dim,int *totpanelptr);
double surfacearea2(simptr sim,int surface,enum PanelShape ps,char *pname,int *totpanelptr);
void panelrandpos(panelptr pnl,double *pos,int dim);
panelptr surfrandpos(surfaceptr srf,double *pos,int dim);
int issurfprod(simptr sim,int i,enum MolecState ms);

// memory management
void surfacessfree(surfacessptr srfss);

// data structure output
void surfaceoutput(simptr sim);
void writesurfaces(simptr sim,FILE *fptr);
int checksurfaceparams(simptr sim,int *warnptr);

// structure set up
int surfenablesurfaces(simptr sim,int maxsurf);
int surfexpandmaxspecies(simptr sim,int maxspecies);
surfaceptr surfaddsurface(simptr sim,const char *surfname);
void surfsetcondition(surfacessptr surfss,enum StructCond cond,int upgrade);
int surfsetepsilon(simptr sim,double epsilon);
int surfsetmargin(simptr sim,double margin);
int surfsetneighdist(simptr sim,double neighdist);
int surfsetcolor(surfaceptr srf,enum PanelFace face,double *rgba);
int surfsetedgepts(surfaceptr srf,double value);
int surfsetstipple(surfaceptr srf,int factor,int pattern);
int surfsetdrawmode(surfaceptr srf,enum PanelFace face,enum DrawMode dm);
int surfsetshiny(surfaceptr srf,enum PanelFace face,double shiny);
int surfsetaction(surfaceptr srf,int i,enum MolecState ms,enum PanelFace face,enum SrfAction act);
int surfsetrate(surfaceptr srf,int ident,enum MolecState ms,enum MolecState ms1,enum MolecState ms2,int newident,double value,int which);
int surfaddpanel(surfaceptr srf,int dim,enum PanelShape ps,const char *string,double *params,const char *name);
int surfsetjumppanel(surfaceptr srf,panelptr pnl1,enum PanelFace face1,int bidirect,panelptr pnl2,enum PanelFace face2);
int surfsetneighbors(panelptr pnl,panelptr *neighlist,int nneigh,int add);
int surfaddemitter(surfaceptr srf,enum PanelFace face,int i,double amount,double *pos,int dim);
surfaceptr surfreadstring(simptr sim,ParseFilePtr pfp,surfaceptr srf,const char *word,char *line2);
int loadsurface(simptr sim,ParseFilePtr *pfpptr,char *line2);
int surfupdate(simptr sim);

// core simulation functions
enum PanelFace panelside(double* pt,panelptr pnl,int dim,double *distptr,int strict);
int lineXpanel(double *pt1,double *pt2,panelptr pnl,int dim,double *crsspt,enum PanelFace *face1ptr,enum PanelFace *face2ptr,double *crossptr,double *cross2ptr,int *veryclose);
int ptinpanel(double *pt,panelptr pnl,int dim);
enum SrfAction surfaction(surfaceptr srf,enum PanelFace face,int ident,enum MolecState ms,int *i2ptr,enum MolecState *ms2ptr);
int rxnXsurface(simptr sim,moleculeptr mptr1,moleculeptr mptr2);
void fixpt2panel(double *pt,panelptr pnl,int dim,enum PanelFace face,double epsilon);
double closestsurfacept(surfaceptr srf,int dim,double *testpt,double *pnlpt,panelptr *pnlptr);
void movemol2closepanel(simptr sim,moleculeptr mptr,int dim,double epsilon,double neighdist,double margin);
int checksurfaces(simptr sim,int ll,int reborn);
int checksurfacebound(simptr sim,int ll);
int checksurfaces_threaded(simptr sim,int ll,int reborn);

/*********************************** Boxes **********************************/

// low level utilities
boxptr pos2box(simptr sim,double *pos);
void boxrandpos(simptr sim,double *pos,boxptr bptr);
int boxaddmol(moleculeptr mptr,int ll);
void boxremovemol(moleculeptr mptr,int ll);

// memory management
void boxssfree(boxssptr boxs);

// data structure output
void boxoutput(boxssptr boxs,int blo,int bhi,int dim);
void boxssoutput(simptr sim);
int checkboxparams(simptr sim,int *warnptr);

// structure set up
void boxsetcondition(boxssptr boxs,enum StructCond cond,int upgrade);
int boxsetsize(simptr sim,const char *info,double val);
int boxesupdate(simptr sim);

// core simulation functions
boxptr line2nextbox(simptr sim,double *pt1,double *pt2,boxptr bptr);
int reassignmolecs(simptr sim,int diffusing,int reborn);

/******************************* Compartments *******************************/

// enumerated types

// low level utilities
int posincompart(simptr sim,double *pos,compartptr cmpt);
int compartrandpos(simptr sim,double *pos,compartptr cmpt);
int loadHighResVolumeSamples(simptr sim,ParseFilePtr *pfpptr,char *line2);

// memory management
void compartssfree(compartssptr cmptss);

// data structure output
void compartoutput(simptr sim);
void writecomparts(simptr sim,FILE *fptr);
int checkcompartparams(simptr sim,int *warnptr);

// structure set up
void compartsetcondition(compartssptr cmptss,enum StructCond cond,int upgrade);
int compartenablecomparts(simptr sim,int maxcmpt);
compartptr compartaddcompart(simptr sim,const char *cmptname);
int compartaddsurf(compartptr cmpt,surfaceptr srf);
int compartaddpoint(compartptr cmpt,int dim,double *point);
int compartaddcmptl(compartptr cmpt,compartptr cmptl,enum CmptLogic sym);
compartptr compartreadstring(simptr sim,ParseFilePtr pfp,compartptr cmpt,const char *word,char *line2);
int loadcompart(simptr sim,ParseFilePtr *pfpptr,char *line2);
int compartsupdate(simptr sim);

/*********************************** Ports **********************************/

// memory management
void portssfree(portssptr portss);

// data structure output
void portoutput(simptr sim);
void writeports(simptr sim,FILE *fptr);
int checkportparams(simptr sim,int *warnptr);

// structure set up
void portsetcondition(portssptr portss,enum StructCond cond,int upgrade);
int portenableports(simptr sim,int maxport);
portptr portaddport(simptr sim,const char *portname,surfaceptr srf,enum PanelFace face);
portptr portreadstring(simptr sim,ParseFilePtr pfp,portptr port,const char *word,char *line2);
int loadport(simptr sim,ParseFilePtr *pfpptr,char* line2);
int portsupdate(simptr sim);

// core simulation functions
int portgetmols(simptr sim,portptr port,int ident,enum MolecState ms,int remove);
int portputmols(simptr sim,portptr port,int nmol,int ident,int *species,double **positions);
int porttransport(simptr sim1,portptr port1,simptr sim2,portptr port2);

/******************************** Filaments *******************************/

// enumerated types

// low level utilities

// memory management
void filssfree(filamentssptr filss);

// data structure output
void filssoutput(simptr sim);
int filcheckparams(simptr sim,int *warnptr);

// structure set up
int filenablefilaments(simptr sim,int maxfil);
filamentptr filreadstring(simptr sim,ParseFilePtr pfp,filamentptr fil,const char *word,char *line2);
int filload(simptr sim,ParseFilePtr *pfpptr,char *line2);
int filsupdate(simptr sim);

// core simulation functions
int filDynamics(simptr sim);

/******************************** Moleculizer *******************************/

// low level utilities
int mzrReadStreamName(char *str,char *streamname,enum MolecState *msptr);
int mzrGetSpeciesStreams(mzrssptr mzrss,char ***streamnames,int *numnames);
void mzrFreeSpeciesStreams(char **streamnames,int numnames);
int mzrIsSmolNameInStream(mzrssptr mzrss,const char *smolname,char *stream);

// memory management
void mzrssfree(mzrssptr mzrss);

// data structure output
int mzrCheckParams(simptr sim,int *warnptr);
int mzrNumberOfSpecies(mzrssptr mzrss);
int mzrNumberOfReactions(mzrssptr mzrss);
void mzrssoutput(simptr sim);
void mzrsswrite(simptr sim,FILE *fptr);

// structure set up
int mzrSetDefaultState(simptr sim,int ident,enum MolecState ms);
int mzrSetStreamDisplay(mzrssptr mzrss,char *streamname,enum MolecState ms,double displaysize,double *color);
int mzrSetStreamDifc(mzrssptr mzrss,char *streamname,enum MolecState ms,double difc);
int mzrSetStreamState(mzrssptr mzrss,char *streamname,enum MolecState ms);
int mzrssreadrules(simptr sim,ParseFilePtr *pfpptr);
void mzrSetValue(mzrssptr mzrss,const char *item,int i1);
int mzrsetupmoleculizer(simptr sim);

// core simulation functions
int mzrExpandSpecies(simptr sim,int ident);

/********************************* Graphics *********************************/

// enumerated types
enum LightParam graphicsstring2lp(char *string);

// low level utilities
int graphicsreadcolor(char **stringptr,double *rgba);

// memory management
void graphssfree(graphicsssptr graphss);

// data structure output
void graphssoutput(simptr sim);
void writegraphss(simptr sim,FILE *fptr);
int checkgraphicsparams(simptr sim,int *warnptr);

// structure setup
void graphicssetcondition(graphicsssptr graphss,enum StructCond cond,int upgrade);
int graphicsenablegraphics(simptr sim,char *type);
int graphicssetiter(simptr sim,int iter);
int graphicssettiffiter(simptr sim,int iter);
int graphicssetdelay(simptr sim,int delay);
int graphicssetframethickness(simptr sim,double thickness);
int graphicssetframecolor(simptr sim,double *color);
int graphicssetgridthickness(simptr sim,double thickness);
int graphicssetgridcolor(simptr sim,double *color);
int graphicssetbackcolor(simptr sim,double *color);
int graphicssettextcolor(simptr sim,double *color);
int graphicssettextitem(simptr sim,char *itemname);
int graphicssetlight(simptr sim,graphicsssptr graphss,int lt,enum LightParam ltparam,double *value);

// structure update functions
int graphicsupdate(simptr sim);

// core simulation functions

// top level OpenGL functions
void smolsimulategl(simptr sim);

/********************************* Commands *********************************/

enum CMDcode docommand(void *cmdfnarg,cmdptr cmd,char *line);

/******************************** Simulation ********************************/

// error handling
void simSetLogging(FILE *logfile,void (*logFunction)(simptr,int,const char*, ...));
void simSetThrowing(int corethreshold);
void simLog(simptr sim,int importance,const char* format, ...);
void simParseError(simptr sim,ParseFilePtr pfp);

// enumerated types
enum SmolStruct simstring2ss(char *string);char *simsc2string(enum StructCond sc,char *string);

// low level utilities
double simversionnumber(void);
void Simsetrandseed(simptr sim,long int randseed);

// memory management
simptr simalloc(const char *root);
void simfree(simptr sim);
void simfuncfree(void);

// data structure output
void simoutput(simptr sim);
void simsystemoutput(simptr sim);
void writesim(simptr sim,FILE *fptr);
void checksimparams(simptr sim);

// structure set up
void simsetcondition(simptr sim,enum StructCond cond,int upgrade);
int simsetdim(simptr sim,int dim);
int simsettime(simptr sim,double time,int code);
int simreadstring(simptr sim,ParseFilePtr pfp,const char *word,char *line2);
int loadsim(simptr sim,const char *fileroot,const char *filename,const char *flags);
int simupdate(simptr sim);
#if OPTION_VCELL
	int simInitAndLoad(const char *fileroot,const char *filename,simptr *smptr,const char *flags, ValueProviderFactory* valueProviderFactory, AbstractMesh* mesh);
#else
	int simInitAndLoad(const char *fileroot,const char *filename,simptr *smptr,const char *flags);
#endif
int simUpdateAndDisplay(simptr sim);

// core simulation functions
int simdocommands(simptr sim);
int simulatetimestep(simptr sim);
void endsimulate(simptr sim,int er);
int smolsimulate(simptr sim);

/********************************* Threads **********************************/
//?? all of this section is new, and undocumented

int getnumberofthreads(simptr sim);
void setnumberofthreads(simptr sim, int newNumber);
void clearthreaddata( threadptr pthread);
stack* alloc_stack(); // Creates a new stack
void free_stack(stack* pStack); // Frees the stack
void push_data_onto_stack(stack* pStack, void* data, size_t data_size);
void clear_stack(stack* pStack);
threadssptr alloc_threadss(int number);
int calculatestride(int total_number, int number_threads);
void threadssfree(threadssptr threads);

void* checksurfaces_threaded_helper(void* data);
void* check_for_reactions_threaded(void* data);

int checksurfaces(simptr sim,int ll,int reborn);

typedef struct surface_data_struct {
	simptr sim;
	int live_list_ndx;
	int firstNdx;
	int secondNdx;
	int resurrect_only;
	} *ptrsurfacefuncdata;

/********************************* Hybrid **********************************/
double evaluateVolRnxRate(simptr sim, rxnptr reaction,  double* pos);
double evaluateMemRnxRate(simptr sim, rxnptr reaction, double* pos, char* panelName);
double evaluateSurfActionRate(simptr sim, surfactionptr actdetails, MolecState ms, double* pos, char* panelName);
int randomPosInMesh(simptr sim, double* centerPos,  double* pos);

#endif

